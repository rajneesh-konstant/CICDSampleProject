name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      platform:
        description: 'Platform to deploy'
        required: true
        default: 'both'
        type: choice
        options:
        - android
        - ios
        - both

jobs:
  deploy-android:
    name: Deploy Android
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install dependencies
      run: npm ci
      
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./android/gradlew
      
    - name: Build Android App Bundle (AAB)
      run: |
        cd android
        ./gradlew bundleRelease
      env:
        ANDROID_KEYSTORE_FILE: ${{ secrets.ANDROID_KEYSTORE_FILE }}
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        
    - name: Deploy to Google Play (Staging)
      if: github.event.inputs.environment == 'staging'
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.cicdsampleproject
        releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
        track: internal
        status: completed
        
    - name: Deploy to Google Play (Production)
      if: github.event.inputs.environment == 'production'
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.cicdsampleproject
        releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
        track: production
        status: completed

  deploy-ios:
    name: Deploy iOS
    runs-on: macos-latest
    if: github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: false

    - name: Install Ruby dependencies
      run: |
        cd ios
        # Install bundler if not present
        gem install bundler --no-document
        # Install gems from Gemfile if it exists
        if [ -f "Gemfile" ]; then
          bundle config set --local deployment false
          bundle config set --local path vendor/bundle
          bundle install --retry=3
        fi

    - name: Install CocoaPods
      run: |
        cd ios
        # Install CocoaPods if not present
        if ! command -v pod &> /dev/null; then
          echo "Installing CocoaPods..."
          sudo gem install cocoapods --no-document
        fi
        # Install pods
        pod install --repo-update
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build and Deploy iOS (Staging)
      if: github.event.inputs.environment == 'staging'
      run: |
        cd ios
        bundle exec fastlane build_release
        bundle exec fastlane deploy_testflight
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        
    - name: Build and Deploy iOS (Production)
      if: github.event.inputs.environment == 'production'
      run: |
        cd ios
        bundle exec fastlane build_release
        bundle exec fastlane deploy_app_store
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
